{
  "name": "Am",
  "scopeName": "source.am",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#templates"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#annotations"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.am",
          "match": "\\b(fn|rq|let|if|else|return|while|for)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.literal.am",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "include": "#string_escaped_char"
        },
        {
          "include": "#string_placeholder"
        }
      ]
    },
    "templates": {
      "name": "string.template.am",
      "begin": "`",
      "end": "`",
      "patterns": [
        {
          "include": "#string_placeholder"
        }
      ]
    },
    "string_escaped_char": {
      "patterns": [
        {
          "match": "\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})",
          "name": "constant.character.escape.am"
        },
        {
          "match": "\\\\[^0-7xuUabfnrtv\\'\"]",
          "name": "invalid.illegal.unknown-escape.am"
        }
      ]
    },
    "string_placeholder": {
      "patterns": [
        {
          "match": "%(\\[\\d+\\])?([\\+#\\-0\\x20]{,2}((\\d+|\\*)?(\\.?(\\d+|\\*|(\\[\\d+\\])\\*?)?(\\[\\d+\\])?)?))?[vT%tbcdoqxXUbeEfFgGspw]",
          "name": "constant.other.placeholder.am"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "comment": "variables",
          "name": "variable.other.am",
          "match": "\\w+"
        }
      ]
    }
  }
}
